class Solution {
  public static Boolean possible(int[] bloomDay, int mid , int m, int k){
    int cnt = 0;
    int noofblooms = 0;
    for(int i=0;i<bloomDay.length;i++){
      if(bloomDay[i]<=mid){
        cnt++;
      }
      else{
        noofblooms = noofblooms + (cnt/k);
        cnt=0;
      }
    }
    noofblooms = noofblooms + (cnt/k);
    return noofblooms>=m;
  }
  public static int[] minmax(int[] bloomDay){
    int min = Integer.MAX_VALUE;
    int max = Integer.MIN_VALUE;
    for(int i:bloomDay){
      min = Math.min(min, i);
      max = Math.max(max, i);
    }
    return new int[]{min,max};

  }
  public static int minDays(int[] bloomDay, int m, int k){
    int[] minmax = minmax(bloomDay);
    int low = minmax[0];
    int high = minmax[1];
    if((long) m*k>bloomDay.length) return -1;
    while(low<=high){
      int mid = (low+high)/2;
      if(possible(bloomDay,mid,m,k)){
        high = mid-1;
      }
      else{
        low = mid+1;
      }
    }
    return low;
  }
}
